---
export interface Props {
  variant?: "primary" | "secondary" | "outline" | "ghost" | "destructive";
  size?: "sm" | "md" | "lg" | "icon";
  href?: string;
  type?: "button" | "submit" | "reset";
  disabled?: boolean;
  class?: string;
  [key: string]: any;
}

const {
  variant = "primary",
  size = "md",
  href,
  type = "button",
  disabled = false,
  class: className = "",
  ...rest
} = Astro.props;

const baseClass =
  "inline-flex items-center justify-center font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50";

const variantClass = {
  primary: "bg-primary text-primary-foreground hover:bg-primary/90",
  secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
  outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
  ghost: "hover:bg-accent hover:text-accent-foreground",
  destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
};

const sizeClass = {
  sm: "h-8 px-3 text-xs rounded-md",
  md: "h-10 px-4 py-2 text-sm rounded-md",
  lg: "h-11 px-8 text-base rounded-md",
  icon: "h-10 w-10 rounded-md",
};

const Element = href ? "a" : "button";
const elementProps = href ? { href, ...rest } : { type, disabled, ...rest };
---

<Element class:list={[baseClass, variantClass[variant], sizeClass[size], className]} {...elementProps}>
  <slot />
</Element>
