---
type Props = {
  defaultTheme?: "auto" | "dark" | "light" | undefined;
};

const { defaultTheme = "auto" } = Astro.props;
---

<script is:inline data-default-theme={defaultTheme}>
  class ThemeManager {
    constructor() {
      this.defaultTheme = document.currentScript.getAttribute("data-default-theme");
      this.storageKey = "theme-preference";
      this.applyTheme.bind(this);
      this.setTheme.bind(this);
      this.getTheme.bind(this);
      this.getSystemTheme.bind(this);
      this.getDefaultTheme.bind(this);

      const mediaMatcher = window.matchMedia("(prefers-color-scheme: light)");
      this.systemTheme = mediaMatcher.matches ? "light" : "dark";
      mediaMatcher.addEventListener("change", (event) => {
        this.systemTheme = event.matches ? "light" : "dark";
        this.applyTheme(this.getTheme());
      });
    }

    applyTheme(theme) {
      const resolvedTheme = theme === "auto" ? this.systemTheme : theme;
      if (resolvedTheme === "light") {
        document.documentElement.classList.remove("dark");
      } else {
        document.documentElement.classList.add("dark");
      }
      document.documentElement.style.colorScheme = resolvedTheme;

      document.dispatchEvent(
        new CustomEvent("theme-changed", {
          detail: { theme, systemTheme: this.systemTheme, defaultTheme: this.applyTheme },
        }),
      );
    }

    setTheme(theme) {
      localStorage.setItem(this.storageKey, theme || this.defaultTheme);
      this.applyTheme(theme || this.defaultTheme);
    }

    getTheme() {
      return localStorage.getItem(this.storageKey) || this.defaultTheme;
    }

    getSystemTheme() {
      return this.systemTheme;
    }

    getDefaultTheme() {
      return this.defaultTheme;
    }
  }

  window.theme ??= new ThemeManager();
  theme.setTheme(theme.getTheme());
</script>
